// frontend/src/pages/AdminDashboard.js
import React, { useEffect, useState, useRef } from "react";
import API from "../api";
import "./AdminDashboard.css";

export default function AdminDashboard() {
  const [events, setEvents] = useState([]);
  const [participants, setParticipants] = useState([]);
  const [selectedEvent, setSelectedEvent] = useState("");
  const [teachers, setTeachers] = useState([]);
  const [clubs, setClubs] = useState([]);
  const [editTeacher, setEditTeacher] = useState(null);
  const [applications, setApplications] = useState([]);
  const [activeTab, setActiveTab] = useState("dashboard");
  const [isLoading, setIsLoading] = useState(true);
  const threeContainerRef = useRef(null);
  const [newTeacher, setNewTeacher] = useState({
    name: "",
    email: "",
    mobile: "",
    club_id: "",
  });

  // ------------------- THREE.JS BACKGROUND -------------------
  useEffect(() => {
    // Initialize Three.js scene
    const initThreeScene = () => {
      if (typeof window !== "undefined" && threeContainerRef.current) {
        const THREE = window.THREE;
        
        if (!THREE) {
          console.error("Three.js not loaded");
          return;
        }

        // Scene setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
        
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x000000, 0);
        threeContainerRef.current.appendChild(renderer.domElement);
        
        // Particles
        const particlesGeometry = new THREE.BufferGeometry();
        const particlesCount = 1000;
        
        const posArray = new Float32Array(particlesCount * 3);
        const colorArray = new Float32Array(particlesCount * 3);
        
        for (let i = 0; i < particlesCount * 3; i++) {
          posArray[i] = (Math.random() - 0.5) * 10;
          colorArray[i] = Math.random();
        }
        
        particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
        particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colorArray, 3));
        
        const particlesMaterial = new THREE.PointsMaterial({
          size: 0.05,
          vertexColors: true,
          transparent: true,
          opacity: 0.8
        });
        
        const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
        scene.add(particlesMesh);
        
        camera.position.z = 5;
        
        // Mouse movement
        let mouseX = 0;
        let mouseY = 0;
        
        document.addEventListener('mousemove', (event) => {
          mouseX = (event.clientX / window.innerWidth) * 2 - 1;
          mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
        });
        
        // Animation
        const clock = new THREE.Clock();
        
        const animate = () => {
          requestAnimationFrame(animate);
          
          const elapsedTime = clock.getElapsedTime();
          
          // Update particles
          particlesMesh.rotation.y = elapsedTime * 0.2;
          particlesMesh.rotation.x = elapsedTime * 0.1;
          particlesMesh.rotation.z = elapsedTime * 0.15;
          
          particlesMesh.position.x = mouseX * 0.5;
          particlesMesh.position.y = mouseY * 0.5;
          
          renderer.render(scene, camera);
        };
        
        animate();
        
        // Handle resize
        const handleResize = () => {
          camera.aspect = window.innerWidth / window.innerHeight;
          camera.updateProjectionMatrix();
          renderer.setSize(window.innerWidth, window.innerHeight);
        };
        
        window.addEventListener('resize', handleResize);
        
        // Cleanup
        return () => {
          window.removeEventListener('resize', handleResize);
          threeContainerRef.current.removeChild(renderer.domElement);
        };
      }
    };

    // Load Three.js dynamically
    if (!window.THREE) {
      const script = document.createElement('script');
      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js';
      script.onload = initThreeScene;
      document.head.appendChild(script);
    } else {
      initThreeScene();
    }
  }, []);

  // ------------------- CLUB APPLICATIONS -------------------
  async function loadApplications() {
    try {
      const res = await API.get("/clubs/applications", {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      });
      setApplications(res.data);
    } catch (error) {
      console.error("Error loading applications:", error);
    }
  }

  async function handleApproveApplication(appId) {
    try {
      await API.post(`/clubs/applications/${appId}/approve`, {}, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      });
      setApplications(applications.filter((app) => app._id !== appId));
    } catch (error) {
      console.error("Error approving application:", error);
    }
  }

  async function handleRejectApplication(appId) {
    if (!window.confirm("Reject this application?")) return;
    try {
      await API.delete(`/clubs/applications/${appId}/reject`, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      });
      setApplications(applications.filter((app) => app._id !== appId));
    } catch (error) {
      console.error("Error rejecting application:", error);
    }
  }

  // ------------------- LOAD DATA -------------------
  useEffect(() => {
    loadAllData();
    setTimeout(() => setIsLoading(false), 1500);
  }, []);

  async function loadAllData() {
    await loadEvents();
    await loadTeachers();
    await loadClubs();
    await loadApplications();
  }

  async function loadEvents() {
    const res = await API.get("/admin/events");
    setEvents(res.data);
  }

  async function loadTeachers() {
    const res = await API.get("/admin/teachers");
    setTeachers(res.data);
  }

  async function loadClubs() {
    const res = await API.get("/admin/clubs");
    setClubs(res.data);
  }

  // ------------------- EVENTS -------------------
  async function loadParticipants(eventId) {
    const res = await API.get(`/events/${eventId}/participants`);
    setParticipants(res.data);
    setSelectedEvent(eventId);
  }

  async function markAttendance(userId) {
    await API.post(`/events/${selectedEvent}/checkin/${userId}`);
    loadParticipants(selectedEvent);
  }

  // ------------------- TEACHERS -------------------
  async function handleDeleteTeacher(id) {
    if (!window.confirm("Delete this teacher?")) return;
    await API.delete(`/admin/teachers/${id}`);
    setTeachers(teachers.filter((t) => t._id !== id));
  }

  async function handleUpdateTeacher() {
    if (!editTeacher) return;
    const res = await API.put(`/admin/teachers/${editTeacher._id}`, editTeacher);
    setTeachers(teachers.map((t) => (t._id === res.data._id ? res.data : t)));
    setEditTeacher(null);
  }

  async function addTeacher() {
    try {
      const res = await API.post("/admin/teachers", newTeacher, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      });
      alert("✅ Teacher added successfully");
      setNewTeacher({ name: "", email: "", mobile: "", club_id: "" });
      loadTeachers();
    } catch (err) {
      alert("❌ Failed to add teacher");
      console.error(err);
    }
  }

  // ------------------- CLUBS -------------------
  async function handleApproveClub(id) {
    await API.put(`/admin/clubs/${id}/approve`);
    setClubs(clubs.map((c) => (c.id === id ? { ...c, approved: true } : c)));
  }

  async function handleRejectClub(id) {
    if (!window.confirm("Reject/Delete this club?")) return;
    await API.delete(`/admin/clubs/${id}`);
    setClubs(clubs.filter((c) => c.id !== id));
  }

  if (isLoading) {
    return (
      <div className="loading-screen">
        <div className="spinner"></div>
        <h2>Loading Dashboard...</h2>
      </div>
    );
  }

  return (
    <div className="admin-dashboard">
      {/* Three.js Background */}
      <div ref={threeContainerRef} className="three-background"></div>
      
      {/* Sidebar Navigation */}
      <div className="admin-sidebar">
        <div className="sidebar-header">
          <h2>Admin Panel</h2>
        </div>
        <ul className="sidebar-nav">
          <li className={activeTab === "dashboard" ? "active" : ""} onClick={() => setActiveTab("dashboard")}>
            <i className="icon-dashboard"></i> Dashboard
          </li>
          <li className={activeTab === "clubs" ? "active" : ""} onClick={() => setActiveTab("clubs")}>
            <i className="icon-clubs"></i> Clubs
          </li>
          <li className={activeTab === "events" ? "active" : ""} onClick={() => setActiveTab("events")}>
            <i className="icon-events"></i> Events
          </li>
          <li className={activeTab === "teachers" ? "active" : ""} onClick={() => setActiveTab("teachers")}>
            <i className="icon-teachers"></i> Teachers
          </li>
          <li className={activeTab === "applications" ? "active" : ""} onClick={() => setActiveTab("applications")}>
            <i className="icon-applications"></i> Applications
          </li>
        </ul>
      </div>

      {/* Main Content */}
      <div className="admin-content">
        <div className="content-header">
          <h1>Admin Dashboard</h1>
          <div className="user-info">
            <span>Welcome, Admin</span>
            <div className="user-avatar">
              <img src="https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80" alt="Admin" />
            </div>
          </div>
        </div>

        {/* Dashboard Overview */}
        {activeTab === "dashboard" && (
          <div className="dashboard-overview">
            <div className="stats-grid">
              <div className="stat-card">
                <div className="stat-icon clubs">
                  <i className="icon-clubs"></i>
                </div>
                <div className="stat-info">
                  <h3>{clubs.length}</h3>
                  <p>Total Clubs</p>
                </div>
              </div>
              <div className="stat-card">
                <div className="stat-icon events">
                  <i className="icon-events"></i>
                </div>
                <div className="stat-info">
                  <h3>{events.length}</h3>
                  <p>Upcoming Events</p>
                </div>
              </div>
              <div className="stat-card">
                <div className="stat-icon teachers">
                  <i className="icon-teachers"></i>
                </div>
                <div className="stat-info">
                  <h3>{teachers.length}</h3>
                  <p>Teachers</p>
                </div>
              </div>
              <div className="stat-card">
                <div className="stat-icon applications">
                  <i className="icon-applications"></i>
                </div>
                <div className="stat-info">
                  <h3>{applications.length}</h3>
                  <p>Pending Applications</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Clubs Section */}
        {activeTab === "clubs" && (
          <div className="section-content">
            <h2>Clubs Management</h2>
            <div className="cards-grid">
              {clubs.map((club) => (
                <div key={club.id} className="card">
                  <div className="card-header">
                    <h3>{club.name}</h3>
                    <span className={`status-badge ${club.approved ? 'approved' : 'pending'}`}>
                      {club.approved ? 'Approved' : 'Pending'}
                    </span>
                  </div>
                  <div className="card-body">
                    <p><strong>Leader:</strong> {club.leader?.name || "N/A"}</p>
                    <p><strong>Members:</strong> {club.memberCount || "N/A"}</p>
                  </div>
                  <div className="card-actions">
                    {!club.approved && (
                      <button className="btn-primary" onClick={() => handleApproveClub(club.id)}>Approve</button>
                    )}
                    <button className="btn-danger" onClick={() => handleRejectClub(club.id)}>Reject</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Events Section */}
        {activeTab === "events" && (
          <div className="section-content">
            <h2>Events Management</h2>
            <div className="events-list">
              {events.map((ev) => (
                <div key={ev._id} className="event-card" onClick={() => loadParticipants(ev._id)}>
                  <div className="event-info">
                    <h3>{ev.title}</h3>
                    <p>{ev.description}</p>
                    <span className="event-date">{new Date(ev.date).toLocaleDateString()}</span>
                  </div>
                  <div className="event-actions">
                    <button className="btn-outline">View Participants</button>
                  </div>
                </div>
              ))}
            </div>

            {participants.length > 0 && (
              <div className="participants-modal">
                <div className="modal-content">
                  <h3>Participants for {events.find(e => e._id === selectedEvent)?.title}</h3>
                  <div className="participants-list">
                    {participants.map((p) => (
                      <div key={p._id} className="participant-item">
                        <div className="participant-info">
                          <h4>{p.name}</h4>
                          <p>{p.email}</p>
                        </div>
                        <div className="participant-status">
                          <span className={`status ${p.checked_in ? 'checked-in' : 'not-checked-in'}`}>
                            {p.checked_in ? "Checked In" : "Not Checked In"}
                          </span>
                          {!p.checked_in && (
                            <button className="btn-primary" onClick={() => markAttendance(p._id)}>Check-in</button>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                  <button className="btn-close" onClick={() => setParticipants([])}>Close</button>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Teachers Section */}
        {activeTab === "teachers" && (
          <div className="section-content">
            <h2>Teachers Management</h2>
            
            {/* Add Teacher Form */}
            <div className="form-card">
              <h3>Add New Teacher</h3>
              <div className="form-grid">
                <input
                  type="text"
                  placeholder="Name"
                  value={newTeacher.name}
                  onChange={(e) => setNewTeacher({ ...newTeacher, name: e.target.value })}
                />
                <input
                  type="email"
                  placeholder="Email"
                  value={newTeacher.email}
                  onChange={(e) => setNewTeacher({ ...newTeacher, email: e.target.value })}
                />
                <input
                  type="text"
                  placeholder="Mobile"
                  value={newTeacher.mobile}
                  onChange={(e) => setNewTeacher({ ...newTeacher, mobile: e.target.value })}
                />
                <select
                  value={newTeacher.club_id}
                  onChange={(e) => setNewTeacher({ ...newTeacher, club_id: e.target.value })}
                >
                  <option value="">-- Select Club --</option>
                  {clubs.map((c) => (
                    <option key={c._id} value={c._id}>
                      {c.name}
                    </option>
                  ))}
                </select>
                <button className="btn-primary" onClick={addTeacher}>Add Teacher</button>
              </div>
            </div>

            {/* Teachers List */}
            <div className="teachers-list">
              {teachers.map((t) => (
                <div key={t._id} className="card">
                  {editTeacher && editTeacher._id === t._id ? (
                    <div className="edit-form">
                      <h3>Edit Teacher</h3>
                      <div className="form-grid">
                        <input
                          value={editTeacher.name}
                          onChange={(e) => setEditTeacher({ ...editTeacher, name: e.target.value })}
                        />
                        <input
                          value={editTeacher.email}
                          onChange={(e) => setEditTeacher({ ...editTeacher, email: e.target.value })}
                        />
                        <input
                          value={editTeacher.mobile}
                          onChange={(e) => setEditTeacher({ ...editTeacher, mobile: e.target.value })}
                        />
                        <select
                          value={editTeacher.club_id || ""}
                          onChange={(e) => setEditTeacher({ ...editTeacher, club_id: e.target.value })}
                        >
                          <option value="">-- Select Club --</option>
                          {clubs.map((c) => (
                            <option key={c._id} value={c._id}>
                              {c.name}
                            </option>
                          ))}
                        </select>
                        <div className="form-actions">
                          <button className="btn-primary" onClick={handleUpdateTeacher}>Save</button>
                          <button className="btn-outline" onClick={() => setEditTeacher(null)}>Cancel</button>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <>
                      <div className="card-header">
                        <h3>{t.name}</h3>
                        <div className="action-buttons">
                          <button className="btn-icon" onClick={() => setEditTeacher(t)}>
                            <i className="icon-edit"></i>
                          </button>
                          <button className="btn-icon danger" onClick={() => handleDeleteTeacher(t._id)}>
                            <i className="icon-delete"></i>
                          </button>
                        </div>
                      </div>
                      <div className="card-body">
                        <p><strong>Email:</strong> {t.email}</p>
                        <p><strong>Mobile:</strong> {t.mobile}</p>
                        <p><strong>Club:</strong> {t.club_name || "Unassigned"}</p>
                      </div>
                    </>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Applications Section */}
        {activeTab === "applications" && (
          <div className="section-content">
            <h2>Club Applications</h2>
            {applications.length === 0 ? (
              <div className="empty-state">
                <i className="icon-applications"></i>
                <h3>No pending applications</h3>
                <p>All applications have been processed.</p>
              </div>
            ) : (
              <div className="applications-list">
                {applications.map((app) => (
                  <div key={app._id} className="card">
                    <div className="card-header">
                      <h3>{app.club_name}</h3>
                      <span className="status-badge pending">Pending</span>
                    </div>
                    <div className="card-body">
                      <p><strong>Email:</strong> {app.club_email}</p>
                      <p><strong>Applicant:</strong> {app.applicant_name}</p>
                      <p><strong>Description:</strong> {app.description || "No description provided"}</p>
                    </div>
                    <div className="card-actions">
                      <button className="btn-primary" onClick={() => handleApproveApplication(app._id)}>Approve</button>
                      <button className="btn-danger" onClick={() => handleRejectApplication(app._id)}>Reject</button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
